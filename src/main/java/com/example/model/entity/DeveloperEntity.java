/*
 * This file is generated by jOOQ.
 */
package com.example.model.entity;


import com.example.model.constant.DeveloperState;
import lombok.*;
import lombok.experimental.SuperBuilder;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Set;


@Getter
@Setter
@ToString
@EqualsAndHashCode(callSuper = false)
@SuperBuilder
@Entity
@AllArgsConstructor
@NoArgsConstructor
@Table(name = "developer")
@PrimaryKeyJoinColumn(name = "id")
public class DeveloperEntity extends AccountEntity{

    @Column(name = "date_of_birth")
    private LocalDate dateOfBirth;

    @Column(name = "work_experience")
    private Integer workExperience;

    private String city;

    @Enumerated(value = EnumType.STRING)
    private DeveloperState state;

    private String username;

    @OneToMany(mappedBy = "developer")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private List<SpecializationEntity> specializations;

    @ManyToMany
    @JoinTable(name = "vacancy_developer", joinColumns =  @JoinColumn(name = "developer_id", referencedColumnName = "id"),
            inverseJoinColumns = @JoinColumn(name = "vacancy_id", referencedColumnName = "id"))
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<VacancyEntity> vacancies;

    @OneToMany(mappedBy = "developer", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private List<DocumentEntity> documents;
}
